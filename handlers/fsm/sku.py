import os
from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup, default_state
from aiogram.fsm.context import FSMContext

import config
import keyboards

router = Router(name=__name__)

img_folder = os.path.abspath(config.IMG_FOLDER)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä—É
class FSMSku(StatesGroup):
    name = State()      # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞
    photos = State()    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞


# –ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
class SkuPhotoSize:
    file_id: str    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
    width: int      # –®–∏—Ä–∏–Ω–∞ —Ñ–æ—Ç–æ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    height: int     # –í—ã—Å–æ—Ç–∞ —Ñ–æ—Ç–æ –≤ –ø–∏–∫—Å–µ–ª—è—Ö

    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
    def __init__(self,
                 photo_size: types.PhotoSize = None,
                 file_id: str = None, width: int = None, height: int = None):
        if photo_size:
            self.file_id = photo_size.file_id
            self.width = photo_size.width
            self.height = photo_size.height
        else:
            self.file_id = file_id
            self.width = width
            self.height = height


# –ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
class SkuPhoto:
    name: str                       # –ò–º—è —Ñ–∞–π–ª–∞
    chat_id: int                    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
    message_id: int                 # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ —Ñ–æ—Ç–æ
    sizes: list[SkuPhotoSize]       # –°–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞

    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
    def __init__(self,
                 message: types.Message = None,
                 sizes: list[types.PhotoSize] = None,
                 chat_id: int = None, message_id: int = None, name: str = None):
        self.name = name
        self.sizes = list[SkuPhotoSize]()

        if message:
            self.chat_id = message.chat.id
            self.message_id = message.message_id
            sizes = message.photo
        else:
            self.chat_id = chat_id
            self.message_id = message_id

        if sizes:
            for size in sizes:
                sku_photo_size = SkuPhotoSize(photo_size=size)
                self.sizes.append(sku_photo_size)


# –ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
class SkuData:
    id: str                     # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    name: str                   # –ê—Ä—Ç–∏–∫—É–ª
    photos: {int: SkuPhoto}     # –°–ª–æ–≤–∞—Ä—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞ dict(message_id=SkuPhoto)

    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
    def __init__(self, sku_id: str = None, name: str = None, photos: {int: SkuPhoto} = None):
        self.id = sku_id
        self.name = name
        self.photos = photos if photos is not None else dict()

    # –ê—Ä—Ç–∏–∫—É–ª –∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    def get_name_text(self):
        name_text = f"<b>{self.name}</b>" if self.name and len(self.name) else ''
        return name_text

    # –ß–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    def get_name_text2(self):
        name_text = f" —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º: {self.get_name_text()}" if self.name and len(self.name) else ''
        return name_text

    async def delete_photos_from_chat(self, chat: types.Chat = None):
        if (not len(self.photos)) or (not chat):
            return

        await chat.bot.delete_messages(
            chat.id,
            [p.message_id for p in self.photos.values()]
        )
        self.photos.clear()


# == –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ============================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–¥—ã /add –∏ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.message(Command('add', ignore_case=True), StateFilter(default_state))
@router.callback_query(F.data == "sku_add", StateFilter(default_state))
async def handler_sku_add(msg_cbq: types.Message | types.CallbackQuery, state: FSMContext):
    await state.set_state(FSMSku.name)

    data = dict(sku_data=SkuData())
    await state.set_data(data)

    text = "–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä.\n\n" \
           "üìù –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:"

    if type(msg_cbq) is types.CallbackQuery:
        await msg_cbq.answer()

        await msg_cbq.message.edit_text(
            text=text,
            reply_markup=keyboards.get_kb_sku_cancel().as_markup()
        )
    else:
        await msg_cbq.answer(
            text=text,
            reply_markup=keyboards.get_kb_sku_cancel().as_markup()
        )
        await msg_cbq.delete()
# =================================================================================================


# == –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ =====================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–¥—ã /cancel –∏ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞" –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.message(Command('cancel', ignore_case=True), ~StateFilter(default_state))
@router.callback_query(F.data == "sku_cancel", ~StateFilter(default_state))
async def handler_cmd_cancel(msg_cbq: types.Message | types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    sku_data = data['sku_data']

    text = f"‚ÅâÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞{sku_data.get_name_text2()}?"

    if type(msg_cbq) is types.CallbackQuery:
        await msg_cbq.answer()

        await msg_cbq.message.edit_text(
            text=text,
            reply_markup=keyboards.get_kb_sku_cancel_yes_no().as_markup()
        )
    else:
        await msg_cbq.answer(
            text=text,
            reply_markup=keyboards.get_kb_sku_cancel_yes_no().as_markup()
        )
        await msg_cbq.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∞" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "sku_cancel_btn_yes", ~StateFilter(default_state))
async def handler_sku_cancel_yes(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    message = callback.message
    data = await state.get_data()
    sku_data = data['sku_data']
    num_photos = len(sku_data.photos)

    await sku_data.delete_photos_from_chat(chat=message.chat)

    await state.clear()

    await message.edit_text(
        text=f"‚ùå üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞{sku_data.get_name_text2()} –æ—Ç–º–µ–Ω–µ–Ω–æ (—É–¥–∞–ª–µ–Ω–æ {num_photos} —Ñ–æ—Ç–æ)!",
        reply_markup=keyboards.get_kb_sku().as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç" –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "sku_cancel_btn_no", ~StateFilter(default_state))
async def handler_sku_cancel_no(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    data = await state.get_data()
    sku_data = data['sku_data']

    if sku_data.name and len(sku_data.name):
        await handler_sku_name_ok(callback, state)
    else:
        await handler_sku_add(callback, state)
# =================================================================================================


# == –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ ===============================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω–æ" —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "sku_name_ok", StateFilter(FSMSku.name))
async def handler_sku_name_ok(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    await state.set_state(FSMSku.photos)

    await handler_sku_photo_add(callback, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª" —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "sku_name_edit", StateFilter(FSMSku.name))
async def handler_sku_name_edit(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await handler_sku_add(callback, state)
# =================================================================================================


# == –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ ==================================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞" —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "sku_photo_add", StateFilter(FSMSku.photos))
async def handler_sku_photo_add(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    message = callback.message
    data = await state.get_data()
    sku_data = data['sku_data']

    await message.delete_reply_markup()
    await message.edit_text(
        text=f"–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞: {sku_data.get_name_text()}.\n\n"
             f"üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=keyboards.get_kb_sku_save_cancel().as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "sku_photo_delete", StateFilter(FSMSku.photos))
async def handler_sku_photo_delete(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    message = callback.message
    data = await state.get_data()
    sku_data = data['sku_data']

    if len(sku_data.photos):
        sku_data.photos.pop(message.reply_to_message.message_id)
        await state.set_data(data)

        await message.reply_to_message.delete()

        await message.edit_text(
            text=f"üóëÔ∏è üì∏ –≠—Ç–æ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞{sku_data.get_name_text2()} —É–¥–∞–ª–µ–Ω–æ!",
            reply_markup=keyboards.get_kb_sku_builder(
                buttons=[
                    'photo_add',
                    'save',
                    'cancel',
                ]
            ).as_markup(),
        )
# =================================================================================================


# == –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ============================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–¥—ã /save –∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
# –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
@router.message(Command('save', ignore_case=True), StateFilter(FSMSku.photos))
@router.callback_query(F.data == "sku_save", StateFilter(FSMSku.photos))
async def handler_sku_save(msg_cbq: types.Message | types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    sku_data = data['sku_data']

    saved_files_text = ''
    for i, photo in enumerate(sku_data.photos.values(), start=1):
        photo_largest = photo.sizes[-1]
        photo_largest.name = config.IMG_FILE_NAME_TEMPLATE % (
            sku_data.name, i, photo_largest.width, photo_largest.height)
        # photo_largest.name = config.IMG_FILE_NAME_TEMPLATE % (sku_data.name, i)
        await msg_cbq.bot.download(
            file=photo_largest,
            destination=os.path.join(img_folder, photo_largest.name)
        )
        saved_files_text += f"üì∏Ô∏è {photo_largest.name} - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {photo_largest.width} x {photo_largest.height}\n"

    await state.clear()

    if type(msg_cbq) is types.CallbackQuery:
        await msg_cbq.answer()
        await msg_cbq.message.delete_reply_markup()
        msg_cbq = msg_cbq.message

    await msg_cbq.answer(
        text=f"‚úÖ üì¶ –¢–æ–≤–∞—Ä{sku_data.get_name_text2()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
             f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(sku_data.photos)} —Ñ–æ—Ç–æ:\n"
             f"{saved_files_text}",
        reply_markup=keyboards.get_kb_sku().as_markup()
    )
# =================================================================================================


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞
@router.message(StateFilter(FSMSku.name), F.text)
async def handler_state_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    sku_data = data['sku_data']
    sku_data.name = message.text.strip()
    await state.set_data(data)

    await message.reply(
        text=f"–í—ã –≤–≤–µ–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞: {sku_data.get_name_text()}.\n\n"
             f"‚ÅâÔ∏è –í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboards.get_kb_sku_name().as_markup()
    )
# =================================================================================================


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç
@router.message(StateFilter(FSMSku.name), ~F.text)
async def handler_state_name_not_text(message: types.Message):
    await message.reply(
        text=f"–≠—Ç–æ –Ω–µ –∞—Ä—Ç–∏–∫—É–ª!\n\n"
             f"üìù –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=keyboards.get_kb_sku_cancel().as_markup()
    )
# =================================================================================================


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–¥–µ–Ω–∏—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
@router.message(StateFilter(FSMSku.photos), F.photo)
async def handler_sku_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    sku_data = data['sku_data']

    sku_data.photos[message.message_id] = SkuPhoto(message=message)

    await state.set_data(data)

    await message.reply(
        text=f"‚úÖ üì∏ –§–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞{sku_data.get_name_text2()} –ø–æ–ª—É—á–µ–Ω–æ!",
        reply_markup=keyboards.get_kb_sku_photo().as_markup()
    )
# =================================================================================================


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–¥–µ–Ω–∏—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ñ–æ—Ç–æ
@router.message(StateFilter(FSMSku.photos), ~F.photo)
async def handler_sku_photos_not_photo(message: types.Message):
    await message.reply(
        text=f"–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ!\n\n"
             f"üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=keyboards.get_kb_sku_save_cancel().as_markup()
    )
# =================================================================================================

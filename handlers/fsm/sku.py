from pathlib import Path
from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup, default_state
from aiogram.fsm.context import FSMContext

from config import config
import keyboards
from db.query import add_log


router = Router(name=__name__)

img_folder = Path(config.img.folder)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä—É
class FSMSku(StatesGroup):
    name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞
    photos = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
    delete = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞


# –ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
class SkuPhotoSize:
    file_id: str  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
    width: int  # –®–∏—Ä–∏–Ω–∞ —Ñ–æ—Ç–æ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    height: int  # –í—ã—Å–æ—Ç–∞ —Ñ–æ—Ç–æ –≤ –ø–∏–∫—Å–µ–ª—è—Ö

    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
    def __init__(self,
                 photo_size: types.PhotoSize = None,
                 file_id: str = None, width: int = None, height: int = None):
        if photo_size:
            self.file_id = photo_size.file_id
            self.width = photo_size.width
            self.height = photo_size.height
        else:
            self.file_id = file_id
            self.width = width
            self.height = height


# –ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
class SkuPhoto(SkuPhotoSize):
    name: str  # –ò–º—è —Ñ–∞–π–ª–∞
    chat_id: int  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
    message_id: int  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ —Ñ–æ—Ç–æ
    sizes: list[SkuPhotoSize]  # –°–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞

    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
    def __init__(self,
                 message: types.Message = None,
                 sizes: list[types.PhotoSize] = None,
                 chat_id: int = None, message_id: int = None, name: str = None):
        super().__init__()
        self.name = name
        self.sizes = list[SkuPhotoSize]()

        if message:
            self.chat_id = message.chat.id
            self.message_id = message.message_id
            sizes = message.photo
        else:
            self.chat_id = chat_id
            self.message_id = message_id

        if sizes:
            for size in sizes:
                sku_photo_size = SkuPhotoSize(photo_size=size)
                self.sizes.append(sku_photo_size)


# –ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
class SkuData:
    id: str  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    name: str  # –ê—Ä—Ç–∏–∫—É–ª
    photos: dict[int: SkuPhoto]  # –°–ª–æ–≤–∞—Ä—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞ dict(message_id=SkuPhoto)
    store: Path  # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    chat: types.Chat  # –ß–∞—Ç

    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
    def __init__(self,
                 sku_id: str = None,
                 name: str = None,
                 photos: dict[int: SkuPhoto] = None,
                 store: Path = None,
                 chat: types.Chat = None):
        self.id = sku_id
        self.name = name
        self.photos = photos if photos is not None else dict()
        self.store = store
        self.chat = chat

    # –ê—Ä—Ç–∏–∫—É–ª –∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    def get_name_text(self) -> str:
        name_text = f"<b>{self.name}</b>" if self.name and len(self.name) else ''
        return name_text

    # –ß–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    def get_name_text2(self) -> str:
        name_text = f" —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º: {self.get_name_text()}" if self.name and len(self.name) else ''
        return name_text

    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ç–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    def get_files_in_store(self) -> list[Path]:
        files = []
        if len(self.name):
            files = sorted(Path(self.store).glob(f"{self.name}*.jpg"))

        return files

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å/–Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    def get_max_files_index(self) -> int:
        files = self.get_files_in_store()
        idx = 0
        if files:
            idx = int(files[-1].stem.split('_')[1])

        return idx

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑ —á–∞—Ç–∞
    async def delete_photos_from_chat(self):
        if len(self.photos):
            await self.chat.bot.delete_messages(
                self.chat.id,
                [p.message_id for p in self.photos.values()]
            )
            self.photos.clear()

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    def delete_photos_from_store(self) -> list[str]:
        deleted_files = []

        if len(self.name):
            files = self.get_files_in_store()
            for file in files:
                deleted_files.append(file.name)
                file.unlink(missing_ok=True)

            self.photos.clear()

        return deleted_files

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    async def save_photos_to_store(self):
        idx = self.get_max_files_index()

        for photo in self.photos.values():
            idx += 1
            photo_largest = photo.sizes[-1]  # –§–æ—Ç–æ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            for photo_size in photo.sizes:
                # –ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                if (photo_size.width <= config.img.resolution) and (photo_size.height <= config.img.resolution):
                    photo_largest = photo_size
                else:
                    break

            photo.file_id = photo_largest.file_id
            photo.width = photo_largest.width
            photo.height = photo_largest.height
            photo.name = config.img.file_name_template % (
                self.name, idx, photo_largest.width, photo_largest.height)
            # photo.name = config.img.file_name_template % (self.name, idx)
            await self.chat.bot.download(
                file=photo.file_id,
                destination=self.store.joinpath(photo.name)
            )


# == –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ============================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–¥—ã /add –∏ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.message(Command('add', ignore_case=True), StateFilter(default_state))
@router.callback_query(F.data == "sku_add", StateFilter(default_state))
async def handler_sku_add(msg_cbq: types.Message | types.CallbackQuery, state: FSMContext):
    await state.set_state(FSMSku.name)

    if type(msg_cbq) is types.CallbackQuery:
        func_answer = msg_cbq.message.edit_text
        chat = msg_cbq.message.chat

        await msg_cbq.answer()
    else:
        func_answer = msg_cbq.answer
        chat = msg_cbq.chat

        await msg_cbq.delete()

    data = dict(sku_data=SkuData(store=img_folder, chat=chat))
    await state.set_data(data)

    await func_answer(
        text="–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä.\n\n"
             "üìù –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=keyboards.get_kb_sku_cancel().as_markup()
    )
# =================================================================================================


# == –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ =====================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–¥—ã /cancel –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.message(Command('cancel', ignore_case=True), ~StateFilter(default_state))
async def handler_cmd_cancel(message: types.Message, state: FSMContext):
    if await state.get_state() == FSMSku.name:
        await state.clear()

        await message.answer(
            text=f"‚ùå üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!",
            reply_markup=keyboards.get_kb_sku().as_markup()
        )
    else:
        data = await state.get_data()
        sku_data = data['sku_data']

        await message.answer(
            text=f"‚ÅâÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞{sku_data.get_name_text2()}?",
            reply_markup=keyboards.get_kb_sku_cancel_yes_no().as_markup()
        )
    await message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞" –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "sku_cancel", ~StateFilter(default_state))
async def handler_sku_cancel(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    if await state.get_state() == FSMSku.name:
        await state.clear()

        await callback.message.edit_text(
            text=f"‚ùå üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!",
            reply_markup=keyboards.get_kb_sku().as_markup()
        )
    else:
        data = await state.get_data()
        sku_data = data['sku_data']

        await callback.message.answer(
            text=f"‚ÅâÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞{sku_data.get_name_text2()}?",
            reply_markup=keyboards.get_kb_sku_cancel_yes_no().as_markup()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∞" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "sku_cancel_btn_yes", ~StateFilter(default_state))
async def handler_sku_cancel_yes(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    message = callback.message
    data = await state.get_data()
    sku_data = data['sku_data']
    num_photos = len(sku_data.photos)

    await sku_data.delete_photos_from_chat()

    await state.clear()

    await message.edit_text(
        text=f"‚ùå üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞{sku_data.get_name_text2()} –æ—Ç–º–µ–Ω–µ–Ω–æ (—É–¥–∞–ª–µ–Ω–æ {num_photos} —Ñ–æ—Ç–æ)!",
        reply_markup=keyboards.get_kb_sku().as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç" –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "sku_cancel_btn_no", ~StateFilter(default_state))
async def handler_sku_cancel_no(callback: types.CallbackQuery):
    await callback.answer()

    await callback.message.delete()
# =================================================================================================


# == –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ ===============================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞
@router.message(StateFilter(FSMSku.name), F.text)
async def handler_state_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    sku_data = data['sku_data']
    sku_data.name = message.text.strip()
    await state.set_data(data)

    await state.set_state(FSMSku.photos)

    await message.reply(
        text=f"–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞: {sku_data.get_name_text()}.\n\n"
             f"üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä!",
        reply_markup=keyboards.get_kb_sku_cancel().as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç
@router.message(StateFilter(FSMSku.name), ~F.text)
async def handler_state_name_not_text(message: types.Message):
    await message.reply(
        text=f"–≠—Ç–æ –Ω–µ –∞—Ä—Ç–∏–∫—É–ª!\n\n"
             f"üìù –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=keyboards.get_kb_sku_cancel().as_markup()
    )
# =================================================================================================


# == –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ============================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–¥—ã /save –∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
# –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
@router.message(Command('save', ignore_case=True), StateFilter(FSMSku.photos))
@router.callback_query(F.data == "sku_save", StateFilter(FSMSku.photos))
async def handler_sku_save(msg_cbq: types.Message | types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    sku_data = data['sku_data']

    await sku_data.save_photos_to_store()

    saved_files_text = ''
    for photo in sku_data.photos.values():
        saved_files_text += f"üì∏Ô∏è {photo.name} - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {photo.width} x {photo.height}\n"

    await state.clear()

    from_user = msg_cbq.from_user

    if type(msg_cbq) is types.CallbackQuery:
        await msg_cbq.answer()
        await msg_cbq.message.delete_reply_markup()
        msg_cbq = msg_cbq.message

    text = f"‚úÖ üì¶ –¢–æ–≤–∞—Ä{sku_data.get_name_text2()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n" \
           f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(sku_data.photos)} —Ñ–æ—Ç–æ:\n" \
           f"{saved_files_text}"
    await msg_cbq.answer(
        text=text,
        reply_markup=keyboards.get_kb_sku().as_markup()
    )

    await add_log(
        user_id=from_user.id,
        user_name=from_user.full_name,
        sku=sku_data.name,
        action='save',
        description=text
    )
# =================================================================================================


# == –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ ==================================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–¥–µ–Ω–∏—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
@router.message(StateFilter(FSMSku.photos), F.photo)
async def handler_sku_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    sku_data = data['sku_data']

    sku_data.photos[message.message_id] = SkuPhoto(message=message)

    await state.set_data(data)

    await message.reply(
        text=f"‚úÖ üì∏ –§–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞{sku_data.get_name_text2()} –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
             f"üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä!",
        reply_markup=keyboards.get_kb_sku_photo().as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–¥–µ–Ω–∏—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ñ–æ—Ç–æ
@router.message(StateFilter(FSMSku.photos), ~F.photo)
async def handler_sku_photos_not_photo(message: types.Message):
    await message.reply(
        text=f"–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ!\n\n"
             f"üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä!",
        reply_markup=keyboards.get_kb_sku_save_cancel().as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(StateFilter(FSMSku.photos), F.data == "sku_photo_delete")
async def handler_sku_photo_delete(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    message = callback.message
    data = await state.get_data()
    sku_data = data['sku_data']

    if len(sku_data.photos):
        sku_data.photos.pop(message.reply_to_message.message_id)
        await state.set_data(data)

        await message.reply_to_message.delete()

        await message.edit_text(
            text=f"üóëÔ∏è üì∏ –≠—Ç–æ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞{sku_data.get_name_text2()} —É–¥–∞–ª–µ–Ω–æ!\n\n"
                 f"üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä!",
            reply_markup=keyboards.get_kb_sku_save_cancel().as_markup()
        )
# =================================================================================================


# == –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ============================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–¥—ã /delete –∏ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.message(Command('delete', ignore_case=True), StateFilter(default_state))
@router.callback_query(F.data == "sku_delete", StateFilter(default_state))
async def handler_sku_delete(msg_cbq: types.Message | types.CallbackQuery, state: FSMContext):
    await state.set_state(FSMSku.delete)

    if type(msg_cbq) is types.CallbackQuery:
        func_answer = msg_cbq.message.answer
        chat = msg_cbq.message.chat

        await msg_cbq.answer()
    else:
        func_answer = msg_cbq.answer
        chat = msg_cbq.chat

        await msg_cbq.delete()

    data = dict(sku_data=SkuData(store=img_folder, chat=chat))
    await state.set_data(data)

    await func_answer(
        text="üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª—è—Ç—å —Ç–æ–≤–∞—Ä.\n\n"
             "üìù –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=keyboards.get_kb_sku_delete_cancel().as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ —É–¥–∞–ª—è–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@router.message(StateFilter(FSMSku.delete), F.text)
async def handler_state_delete(message: types.Message, state: FSMContext):
    data = await state.get_data()
    sku_data = data['sku_data']
    sku_data.name = message.text.strip()
    await state.set_data(data)

    await message.reply(
        text=f"‚ÅâÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä{sku_data.get_name_text2()}?",
        reply_markup=keyboards.get_kb_sku_delete_yes_no().as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ —É–¥–∞–ª—è–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç
@router.message(StateFilter(FSMSku.delete), ~F.text)
async def handler_state_delete_not_text(message: types.Message):
    await message.reply(
        text=f"–≠—Ç–æ –Ω–µ –∞—Ä—Ç–∏–∫—É–ª!\n\n"
             f"üìù –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=keyboards.get_kb_sku_delete_cancel().as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∞" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "sku_delete_btn_yes", ~StateFilter(default_state))
async def handler_sku_delete_yes(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    message = callback.message
    data = await state.get_data()
    sku_data = data['sku_data']

    deleted_files = sku_data.delete_photos_from_store()
    deleted_files_text = "\n".join(deleted_files)

    if len(deleted_files):
        text = f"‚ùå üì¶ –¢–æ–≤–∞—Ä{sku_data.get_name_text2()} —É–¥–∞–ª–µ–Ω!\n\n" \
               f" –£–¥–∞–ª–µ–Ω–æ {len(deleted_files)} —Ñ–æ—Ç–æ:\n" \
               f"{deleted_files_text}"
        await add_log(
            user_id=callback.from_user.id,
            user_name=callback.from_user.full_name,
            sku=sku_data.name,
            action='delete',
            description=text
        )
    else:
        text = f"‚ö†Ô∏è üì¶ –¢–æ–≤–∞—Ä{sku_data.get_name_text2()} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"

    await state.clear()

    await message.edit_text(
        text=text,
        reply_markup=keyboards.get_kb_sku().as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç" –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "sku_delete_btn_no", ~StateFilter(default_state))
@router.callback_query(F.data == "sku_delete_cancel", ~StateFilter(default_state))
async def handler_sku_delete_no(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    await state.clear()

    await callback.message.delete()
# =================================================================================================

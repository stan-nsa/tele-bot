from aiogram import Bot, Router, types, F
from aiogram.filters import Command
import keyboards.admin as kb_admin
from keyboards import get_kb_yes_no

from config import config

from db import query

# from filters import IsAdmin

router = Router(name=__name__)


# –†–æ—É—Ç–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–∫–∏ (—Ñ–∏–ª—å—Ç—Ä—ã —É–∂–µ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –≤ /handlers/__init__.py)
# router.message.filter(F.chat.type == 'private')
# router.callback_query.filter(F.chat.type == 'private')


# @router.message(Command('admin', ignore_case=True), IsAdmin(config.bot.admins))
@router.message(Command('admin', ignore_case=True), F.from_user.id.in_(config.bot.admins))
async def handler_command_admin(message: types.Message, bot: Bot):
    await message.delete()

    await bot.send_message(
        chat_id=message.from_user.id,
        text=f"–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω! üòç",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await bot.send_message(
        chat_id=message.from_user.id,
        text="–ê–¥–º–∏–Ω–∫–∞",
        reply_markup=kb_admin.get_kb_admin(
            user_id=message.from_user.id,
            chat_id=message.chat.id
        )
    )


@router.message(Command('admin', ignore_case=True))
async def handler_command_admin(message: types.Message):
    if not config.bot.admins:
        await message.answer(
            text="–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                 "–£–∑–Ω–∞–π—Ç–µ —Å–≤–æ–π ID, –ø—Ä–æ–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!",
            reply_markup=kb_admin.get_kb_admin(
                user_id=message.from_user.id,
                chat_id=message.chat.id
            )
        )
    else:
        await message.answer(
            text="–ê —Ç—ã —Ç–æ—á–Ω–æ –ê–¥–º–∏–Ω? üòè")


@router.callback_query(F.data == "adm_get_users")
async def handler_adm_get_users(callback: types.CallbackQuery):
    await callback.answer()

    await callback.message.edit_text(
        text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:",
        reply_markup=await kb_admin.get_kb_admin_users()
    )


@router.callback_query(F.data.startswith("adm_get_user:"))
async def handler_adm_get_user(callback: types.CallbackQuery):
    await callback.answer()

    cmd_str, id_str, full_name_str = callback.data.split(":")

    await callback.message.answer(
        text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞:\n"
             f"<b>{full_name_str}</b>",
        reply_markup=kb_admin.get_kb_admin_user(user_id=id_str, user_full_name=full_name_str)
    )


@router.callback_query(F.data.startswith("adm_user_delete:"))
async def handler_adm_user_delete(callback: types.CallbackQuery):
    await callback.answer()

    cmd_str, id_str, full_name_str = callback.data.split(":")

    await callback.message.edit_text(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞:\n"
             f"<b>{full_name_str}</b>?",
        reply_markup=get_kb_yes_no(prefix=f"adm_del_user:{id_str}:{full_name_str}:").as_markup()
    )


@router.callback_query(F.data.startswith("adm_del_user:"))
async def handler_adm_delete_user(callback: types.CallbackQuery):
    await callback.answer()

    cmd_str, id_str, full_name_str, btn_str = callback.data.split(":")

    if btn_str == "btn_yes":
        await query.delete_user_by_id(user_id=id_str)

        await callback.message.edit_text(
            text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞:\n"
                 f"<b>{full_name_str}</b>\n"
                 "üóëÔ∏è –£–¥–∞–ª–µ–Ω!",
            reply_markup=None
        )
    else:
        await callback.message.edit_text(
            text="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞:\n"
                 f"<b>{full_name_str}</b>\n"
                 "–û—Ç–º–µ–Ω–µ–Ω–æ!",
            reply_markup=None
        )


@router.callback_query(F.data.startswith("adm_get_"))
async def handler_adm_get_my_id(callback: types.CallbackQuery):
    await callback.answer()

    cmd_str, id_str = callback.data.split(":")

    if cmd_str == "adm_get_my_id":  # –ü–æ–∫–∞–∑–∞—Ç—å ID —é–∑–µ—Ä–∞
        text = f"–í–∞—à ID:\n{id_str}"
    elif cmd_str == "adm_get_chat_id":  # –ü–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞
        if callback.message.chat.id == int(id_str):  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –∞–¥–º–∏–Ω–∫–∞ –±—ã–ª–∞ –∑—É–ø—É—â–µ–Ω–∞ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º
            text = "–í—ã –≤—ã–∑–≤–∞–ª–∏ –∞–¥–º–∏–Ω–∫—É –Ω–µ –≤ –æ–±—â–µ–º —á–∞—Ç–µ, –∞ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º!\n\n" \
                   "–í—ã–∑–æ–≤–∏—Ç–µ –∞–¥–º–∏–Ω–∫—É –∫–æ–º–∞–Ω–¥–æ–π /admin –≤ –æ–±—â–µ–º —á–∞—Ç–µ, –≥–¥–µ —ç—Ç–æ—Ç –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º!"
        else:  # –ü–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞
            text = f"ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –≤—ã–∑–≤–∞–ª–∏ –∞–¥–º–∏–Ω–∫—É:\n{id_str}"
    else:
        text = "–ß–µ–≥–æ –Ω–∞–¥–æ?"

    await callback.message.edit_text(
        text=text,
        reply_markup=callback.message.reply_markup
    )
